#!/home/vsivadas/anaconda/bin/python
#-----------------------------------------------------------------------------------------------
# this code accepts the source folder for analyzing the single particle percent in the experiment 
#contained in the folder and caches the results into a cachefile, to be read later. 
# The input format is "./cache_cluster_analysis_SingleParticlePercent_fixed path_without_'/' gap_size_used init_init_time final_time"
#-----------------------------------------------------------------------------------------------


import susipop as sp
import os
import sys
import numpy as np
import pandas as pd
import subprocess
from susipop import filter
from susipop import reader
from susipop.susi.cache import SusiCache as cache
import json

def LoadJSON(filename):
    file = open(filename)
    string = file.read()
    file.close()
    return json.loads(string) 

def get_phi_yd_nuf(path_add):
    config = LoadJSON(path_add+'/config.json')
    fluid = LoadJSON(path_add+'/fluid_1.json')
    shearrate = config["experiment"]["shearrate"]["constant"]["yd"]
    phi=config["material"]["particles"]["0"]["phi"]
    nu_fluid = fluid["viscshear"]["constant"]["nu"]*1000
    return phi,shearrate,nu_fluid 

#Arguements required 
#enter the path to the directory


path = str(sys.argv[1])
phi,shearrate,nu_fluid = get_phi_yd_nuf(path)

gap =  float(sys.argv[2])
tmin = int(sys.argv[3])
tmax = int(sys.argv[4])

timerange = [tmin, tmax]
print path
cachefilename = "./cache/" + "phi_"+str(phi)+"_shearrate_"+str(float(shearrate)).replace(".","_")+".h5"
clustercache = cache(cachefile=cachefilename)
dataset = sp.reader.DataSet(path,particles=True, fluid=False,cachefile=cachefilename)

for i,time_idx in enumerate(range(timerange[0], timerange[1])):
    try:
        if not clustercache.has_data(dataset.tlist[time_idx],"single_particle_percent_gap_"+str(gap)):
            dataset.load_state(dataset.tlist[time_idx])
            spp = dataset.get_quantity("single_particle_percentage",update=True, gap=gap)
            clustercache.save_data(dataset.tlist[time_idx],{"single_particle_percent_gap_"+str(gap):spp})
            print "data saved at timestep", dataset.tlist[time_idx]
        else:
            print "data found at timestep", dataset.tlist[time_idx]
    
    except Exception as e:
        print e
        continue
