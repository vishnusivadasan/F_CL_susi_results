#!/usr/bin/python
import os
import numpy as np
import pandas as pd
import subprocess
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerLine2D

proc = subprocess.Popen('find . -maxdepth 4 -type f -iname "nu_t.dat" ',shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
nu_files = proc.communicate()[0].split()

# os.mkdir('nu_files')
# for file in nu_files:
    # filename = file.split('/')[1] + "_" +file.split('/')[3]
    # exec_string = "cp " + file + " nu_files/"+filename
    # os.system(exec_string)
    # print exec_string
    
strain_rate=  []
phi = []
mean_viscosity = []

for file in nu_files:
    try:
        df = pd.read_csv(file)
        idx = np.where(df[df.columns[4]]== max(df[df.columns[4]]))[0][0] 
        print "idx", idx
        #if len(df[df.columns[4]]) < 40: 
        nu_mean = np.mean(df[df.columns[4]][idx-3:idx+3])
        #nu_mean = np.mean(df[df.columns[4]][-15:])
        #else: nu_mean = np.mean(df[df.columns[4]][-30:])
        str_rate = float(file.split('/')[1].split('_')[2].split('d')[1])
        phi_val = float(file.split('/')[1].split('_')[1].split('i')[1])
        print phi_val , str_rate, nu_mean
	if nu_mean < 1e1000:
		mean_viscosity.append(nu_mean)
		phi.append(phi_val)
		strain_rate.append(str_rate)
    except:
        continue

def polyfit(x,y):
    z = np.polyfit(x, y, 12)
    f = np.poly1d(z)
    # calculate new x's and y's
    x_new = np.linspace(x[0], x[-1], 50)
    y_new = f(x_new)
    return x_new, y_new

strain_rate=  np.array(strain_rate)
phi = np.array(phi)
mean_viscosity = np.array(mean_viscosity)
fig, ax = plt.subplots()
ax.set_xscale('log')
ax.set_yscale('log')
for p in np.unique(phi):
	print p
	idx =  np.where(phi == p)[0]
	if len(idx) > 0:
		ax.plot( zip(*sorted(zip(strain_rate[idx], mean_viscosity[idx])))[0],  zip(*sorted(zip(strain_rate[idx], mean_viscosity[idx])))[1], marker='o', label = 'phi= '+str(p))
		#x_fit, y_fit = polyfit(zip(*sorted(zip(strain_rate[idx], mean_viscosity[idx])))[0], zip(*sorted(zip(strain_rate[idx], mean_viscosity[idx])))[1])
		#ax.plot( zip(*sorted(zip(x_fit,y_fit)))[0], zip(*sorted(zip(x_fit, y_fit)))[1], '--')
		print strain_rate[idx], mean_viscosity[idx]

#plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
plt.xlabel('shear rate (1/s)')
plt.ylabel('relative viscosity')
plt.suptitle('viscosity_vs_shearrate')
legend = ax.legend(loc='best', shadow=True)
plt.savefig('viscosity_vs_shearrate_log')
plt.close()
