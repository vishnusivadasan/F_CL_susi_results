#!/usr/bin/python
import itertools
import os
from susipop import filter
from susipop import reader
import numpy as np
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
import sys 
import pandas as pd
import heatmap
from tqdm import tqdm
phivals = [float(i)/100.0 for i in sys.argv[1:]]

def enumerate2(xs, start=0, step=1):
    for x in xs:
        yield (start, x)
        start += step

def get_folder_list():
    f = next(os.walk('.'))[1]
    return f

folders = get_folder_list()

db = dict()

for phi in phivals:
    db[phi] = [[],[]]
 
for folder in tqdm(folders):
  try:
    exp = reader.DataSet(folder, fluid=False, particles=True)
    phi = round(exp.phi,2)
    #print exp_phi, phivals
    #print "truthval", (exp_phi in phivals and len(exp.tlist) > 1)
    viscosity_file = pd.read_csv(folder+"/result/nu_t.dat")
    time = viscosity_file[viscosity_file.columns[0]]
    if (phi in phivals) & (len(exp.tlist) > 1):
        print folder
        for t in tqdm(exp.tlist[100::10]):
            exp.load_state(t)
            t_ = np.where(time == t)[0]
            viscosity = viscosity_file[viscosity_file.columns[3]][t_]
            #Shearstress = exp.shearrate*viscosity
            Shearstress = np.mean([np.linalg.norm(j) for j in exp.particles.sshear_fric]) 
            #Shearstress = np.mean([np.linalg.norm(j) for j in exp.particles.Sshear_tot]) 
            num_part_fric = len(np.where(np.asarray([np.linalg.norm(j) for j in exp.particles.sshear_fric])!= 0)[0]) 
            #number of particles in friction
            percent_part_fric = float(num_part_fric)/float(exp.npart)*100.0
            #print folder,'\t', percent_part_fric
            db[phi][0].append(Shearstress)
            #print Shearstress
            db[phi][1].append(percent_part_fric)
        #print db[phi] 
  except Exception as e: print str(e);continue
  


def movingaverage(interval, window_size):
    window= np.ones(int(window_size))/float(window_size)
    return np.convolve(interval, window, 'same')
def fit_curve(x,y,degree):
    #logx = [np.log(i) if i!=0 else 0 for i in x]  
    #logy = [np.log(i) if i!=0 else 0 for i in y]  
    #X = np.unique(x)
    #Y = np.poly1d(np.polyfit(logx, logy, degree))(np.unique(logx))
    #x = [np.exp(i) if i!=0 else 0 for i in X]  
    #y = [np.exp(i) if i!=0 else 0 for i in Y]  
    #plt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, degree))(np.unique(x)))
    x_new = np.unique(x)
    y_new= np.poly1d(np.polyfit(x, y, degree))(np.unique(x))
    plt.plot(x_new, y_new, '-')
plt.figure(figsize=[10,10])
for phi in phivals:
    #plt.xscale('log')
    plt.xlabel('log10 Shear Stress (Pa)')
    plt.ylabel('percentage of frictional contacts')
    #data = np.asarray(sort_data(db[phi][0], db[phi][1]))
    #plt.plot(data[0], data[1],'o',label = "phi = "+str(phi))    
    #plt.plot(db[phi][0], db[phi][1],'.',label = "phi = "+str(phi))    
    plt.plot(np.log10(db[phi][0]), db[phi][1],'.',label = "phi = "+str(phi))    
    #y_av = movingaverage(db[phi][1], 10)
    #x_av = np.log10(db[phi][0])
    #plt.plot(x_av,y_av)
    #fit_curve(np.log10(db[phi][0]), db[phi][1],4)
    plt.legend(loc = 'upper left')

name = 'shearstress_frictional_vs_frcitionalcontacts'
plt.savefig(name)

np.save('friction_vs_frictional_stress.npy',db)
#plt.figure(figsize=[10,10])
#pts_scatter = [[],[]]
#pts_tuple = []
#for phi in phivals:
#    for i in range(len(db[phi][0])):




#        pts_scatter[0].append(db[phi][0][i])
#        pts_scatter[1].append(db[phi][1][i])
#        pts_tuple.append((np.log10(db[phi][0][i]),db[phi][1][i]))
#plt.xscale('log')
#plt.xlabel('Shear Stress (Pa)')
#plt.ylabel('percentage of particles in frictional contacts')
#
#plt.scatter(pts_scatter[0],pts_scatter[1])
#plt.savefig("heatmap_scatter")
#
#plt.figure()
#plt.subpxlot(1,1,1)
#hm = heatmap.Heatmap()
#img = hm.heatmap(pts_tuple, dotsize=300, size=(1980, 1080), opacity=128, scheme='classic')
#plt.xlabel('Shear Stress (Pa)')
#plt.savefig("heatmap_tuple") 
