#!/home/vsivadas/anaconda/bin/python 
#-----------------------------------------------------------------------------------------------
# this code accepts the source folder for analyzing the cluster size distribution in the experiment 
#contained in the folder and caches the results into a cachefile, to be read later. The gap used 
# in the analysis has to be calculated from the mean gap vs shear stress relationship in 
# frictional particles, between which there seems to be a relationship. One that is done, 
# the values of a a,b,c,d which are coefficients of the polynomial has to be upated in the script 
# below.  
# The input format is "./cache_clusters_and_cluster_size_distribution_dynamic_gap path_without_'/' gap_size_used init_init_time final_time"
#-----------------------------------------------------------------------------------------------


import susipop as sp
import os
import sys
import numpy as np
import pandas as pd
import subprocess
from susipop import filter
from susipop import reader
from susipop.susi.cache import SusiCache as cache
import json


def LoadJSON(filename):
    file = open(filename)
    string = file.read()
    file.close()
    return json.loads(string) 

def get_phi_yd_nuf(path_add):
    config = LoadJSON(path_add+'/config.json')
    fluid = LoadJSON(path_add+'/fluid_1.json')
    shearrate = config["experiment"]["shearrate"]["constant"]["yd"]
    phi=config["material"]["particles"]["0"]["phi"]
    nu_fluid = fluid["viscshear"]["constant"]["nu"]*1000
    return phi,shearrate,nu_fluid 


path = str(sys.argv[1])
phi,shearrate,nu_fluid = get_phi_yd_nuf(path)

dataset = sp.reader.DataSet(path,particles=True, fluid=False)

cache_file = cache(cachefile=dataset.cachefile)
tmax = len(dataset.tlist[1:])
viscosity_file = pd.read_csv(path+"/result/nu_t.dat")
viscosity_non_relative = np.array(viscosity_file[viscosity_file.columns[2]])
shear_stress = np.asarray([i*shearrate for i in viscosity_non_relative])


#print len(shear_stress), tmax


a = 0.00868924612 
b = -0.106230138681
c = -0.198477972798 
d = -7.21380690351

def predict_gap(shear_stress):
    if shear_stress > 0.14:
        j = shear_stress
        log_gap = a*np.log10(j)**4 +b*np.log10(j)**2 +c*np.log10(j) + d
        return 10**(log_gap)
    else:
        return 1e-10

for i,t in enumerate(dataset.tlist[1:tmax]):
    print str(float(i)/len(dataset.tlist[1:tmax])*100)
    #print "shear stress =", shear_stress
    gap = predict_gap(shear_stress[i])
    try:
        #if not cache_file.has_data(t,"cluster_size_distribution_dynamic_gap"):
        if True:
            print "saving cluster_size_distribution data to t=",t
            dataset.load_state(t)
            s, ns = dataset.get_quantity("cluster_size_distribution", gap = gap, update=True)
            print s
            cache_file.save_data(t,{"cluster_size_distribution_dynamic_gap":[s, ns]})
        else:
            print "cluster_size_distribution data found at t=",t
    except Exception as e:
        print e
        continue 
