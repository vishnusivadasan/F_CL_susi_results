#!/usr/bin/python
import os
import numpy as np
import pandas as pd
import subprocess

import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt

from matplotlib.legend_handler import HandlerLine2D

#get_all_nu_files, need to use glob for better codeflow.

proc = subprocess.Popen('find . -type f -iname "nu_t.dat" ',shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
nu_files = proc.communicate()[0].split()

#plotting with errorbars
def plot_errorbar(ax,x,y,err,col_mean='r',col_err='g'):
    ax.errorbar(x, y,yerr=err)
def plot_errorbar_fill(ax,x,y,err,col_mean='r',col_err='g'):
    ax.plot(x,y,col_mean)
    ax.fill_between(x, y+err, y-err,color=col_err)

# os.mkdir('nu_files')
# for file in nu_files:
    # filename = file.split('/')[1] + "_" +file.split('/')[3]
    # exec_string = "cp " + file + " nu_files/"+filename
    # os.system(exec_string)
    # print exec_string
    
strain_rate=  []
phi = []
mean_viscosity = []
variance_viscosity = []

for file in nu_files:
    try:
        df = pd.read_csv(file)
	nu_mean = np.mean(df[df.columns[4]])
	nu_var = np.std(df[df.columns[4]])
        str_rate = float(file.split('/')[1].split('_')[2].split('d')[1])
        phi_val = float(file.split('/')[1].split('_')[1].split('i')[1])
        print phi_val , str_rate, nu_mean
	if nu_mean < 1e100:
		mean_viscosity.append(nu_mean)
		variance_viscosity.append(nu_var)
		phi.append(phi_val)
		strain_rate.append(str_rate)
    except:
        continue

strain_rate=  np.array(strain_rate)
phi = np.array(phi)
mean_viscosity = np.array(mean_viscosity)
variance_viscosity = np.array(variance_viscosity)

fig, ax = plt.subplots()
ax.set_xscale('log')
ax.set_yscale('log',nonposy='clip')
for p in np.unique(phi):
	print p
	idx =  np.where(phi == p)[0]
	if len(idx) > 0:
		ax.errorbar(strain_rate[idx], mean_viscosity[idx],variance_viscosity[idx], ls='none',label = 'phi= '+str(p))
        ax.plot(zip(*sorted(zip(strain_rate[idx], mean_viscosity[idx])))[0], zip(*sorted(zip(strain_rate[idx], mean_viscosity[idx])))[1], '--o')
		#plot_errorbar(ax,strain_rate[idx], mean_viscosity[idx], variance_viscosity[idx])
		#print strain_rate[idx], mean_viscosity[idx]

#plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
plt.xlabel('shear rate (1/s)')
plt.ylabel('relative viscosity')
ax.set_xlim([.1,2000])
legend = ax.legend(loc='best', shadow=True)
plt.savefig('viscosity_vs_shearrate_val')
	
