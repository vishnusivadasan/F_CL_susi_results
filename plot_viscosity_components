#!/usr/bin/python
import os
import numpy as np
import pandas as pd
import subprocess
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerLine2D

#solid part
ialist = ['tot','hd','lub','rep','fric','intfluid']
files = dict()
for ia in ialist:
	cmd =  'find . -maxdepth 4 -type f -iname "part_stress_' + ia+ '_t.dat"' 
	proc = subprocess.Popen(cmd  ,shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	file = proc.communicate()[0].split()
	files[ia] = file
#fluid part
fluid_list = ['fluid_stress']
for ia in fluid_list:
	cmd =  'find . -maxdepth 4 -type f -iname "' + ia + '_t.dat"'  
	proc = subprocess.Popen(cmd  ,shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	file = proc.communicate()[0].split()
	files[ia] = file

for ia in files.keys():
	strain_rate=  []
	phi = []
	mean_viscosity = []
	variance_viscosity = []
	variance_of_mean_viscosity = []
	print ia + "\n" + "-----------------------------------------"
	for file in files[ia]:
		df = pd.read_csv(file)
		stress_mean = np.mean(df[df.columns[2]])
		stress_variance = np.mean(df[df.columns[3]])
		stress_var_of_mean = np.sqrt(np.var(df[df.columns[2]]))
		str_rate = float(file.split('/')[1].split('_')[2].split('d')[1])
		phi_val = float(file.split('/')[1].split('_')[1].split('i')[1])/100.0
		if ia in ialist:
			factor = phi_val
		else:
			factor = 1-phi_val
		mean_viscosity.append(factor*stress_mean/str_rate/1.002e-3) #shoud phi_val be multiplied?
		variance_viscosity.append(stress_variance)
		variance_of_mean_viscosity.append(stress_var_of_mean)
		phi.append(phi_val)
		strain_rate.append(str_rate)
		#print phi_val , str_rate, stress_mean/str_rate/1.002e-3
	print "\n"
	strain_rate=  np.array(strain_rate)
	phi = np.array(phi)
	mean_viscosity = np.array(mean_viscosity)
	variance_viscosity = np.array(variance_viscosity)
	variance_of_mean_viscosity = np.array(variance_of_mean_viscosity)
	plt.figure(figsize=(20, 20), dpi=200)
	fig, ax = plt.subplots()
	ax.set_xscale('log')
	plt.suptitle('viscosity_vs_shearrate_'+ia)
	for p in np.unique(phi):
		print p
		idx =  np.where(phi == p)[0]
		if len(idx) > 0:
			#ax.plot(strain_rate[idx], mean_viscosity[idx], marker='o', label = 'phi= '+str(p))
			#ax.errorbar(strain_rate[idx], mean_viscosity[idx], variance_of_mean_viscosity[idx],  label = 'phi= '+str(p))
			ax.errorbar(strain_rate[idx], mean_viscosity[idx], yerr=variance_viscosity[idx], marker='o', label = 'phi= '+str(p))
			print strain_rate[idx], mean_viscosity[idx]

	#plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
	plt.xlabel('shear rate (1/s)')
	plt.ylabel('relative viscosity')
	ax.set_xlim([.1,2000])
	legend = ax.legend(loc='upper left', shadow=True)
	plt.savefig('viscosity_vs_shearrate_'+ia)
	plt.close()

	
